/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceProviderProfile as PrismaServiceProviderProfile,
  User as PrismaUser,
} from "@prisma/client";

export class ServiceProviderProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceProviderProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceProviderProfile.count(args);
  }

  async serviceProviderProfiles(
    args: Prisma.ServiceProviderProfileFindManyArgs
  ): Promise<PrismaServiceProviderProfile[]> {
    return this.prisma.serviceProviderProfile.findMany(args);
  }
  async serviceProviderProfile(
    args: Prisma.ServiceProviderProfileFindUniqueArgs
  ): Promise<PrismaServiceProviderProfile | null> {
    return this.prisma.serviceProviderProfile.findUnique(args);
  }
  async createServiceProviderProfile(
    args: Prisma.ServiceProviderProfileCreateArgs
  ): Promise<PrismaServiceProviderProfile> {
    return this.prisma.serviceProviderProfile.create(args);
  }
  async updateServiceProviderProfile(
    args: Prisma.ServiceProviderProfileUpdateArgs
  ): Promise<PrismaServiceProviderProfile> {
    return this.prisma.serviceProviderProfile.update(args);
  }
  async deleteServiceProviderProfile(
    args: Prisma.ServiceProviderProfileDeleteArgs
  ): Promise<PrismaServiceProviderProfile> {
    return this.prisma.serviceProviderProfile.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.serviceProviderProfile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
