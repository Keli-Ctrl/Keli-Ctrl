/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceProviderProfileService } from "../serviceProviderProfile.service";
import { ServiceProviderProfileCreateInput } from "./ServiceProviderProfileCreateInput";
import { ServiceProviderProfile } from "./ServiceProviderProfile";
import { ServiceProviderProfileFindManyArgs } from "./ServiceProviderProfileFindManyArgs";
import { ServiceProviderProfileWhereUniqueInput } from "./ServiceProviderProfileWhereUniqueInput";
import { ServiceProviderProfileUpdateInput } from "./ServiceProviderProfileUpdateInput";

export class ServiceProviderProfileControllerBase {
  constructor(protected readonly service: ServiceProviderProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceProviderProfile })
  async createServiceProviderProfile(
    @common.Body() data: ServiceProviderProfileCreateInput
  ): Promise<ServiceProviderProfile> {
    return await this.service.createServiceProviderProfile({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reviews: true,
        skills: true,
        availability: true,
        rates: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceProviderProfile] })
  @ApiNestedQuery(ServiceProviderProfileFindManyArgs)
  async serviceProviderProfiles(
    @common.Req() request: Request
  ): Promise<ServiceProviderProfile[]> {
    const args = plainToClass(
      ServiceProviderProfileFindManyArgs,
      request.query
    );
    return this.service.serviceProviderProfiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reviews: true,
        skills: true,
        availability: true,
        rates: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceProviderProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceProviderProfile(
    @common.Param() params: ServiceProviderProfileWhereUniqueInput
  ): Promise<ServiceProviderProfile | null> {
    const result = await this.service.serviceProviderProfile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reviews: true,
        skills: true,
        availability: true,
        rates: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceProviderProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceProviderProfile(
    @common.Param() params: ServiceProviderProfileWhereUniqueInput,
    @common.Body() data: ServiceProviderProfileUpdateInput
  ): Promise<ServiceProviderProfile | null> {
    try {
      return await this.service.updateServiceProviderProfile({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          reviews: true,
          skills: true,
          availability: true,
          rates: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceProviderProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceProviderProfile(
    @common.Param() params: ServiceProviderProfileWhereUniqueInput
  ): Promise<ServiceProviderProfile | null> {
    try {
      return await this.service.deleteServiceProviderProfile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          reviews: true,
          skills: true,
          availability: true,
          rates: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
